image: golang:1.10

variables:
  REPO_NAME: gitlab.dreau.fr/home/onetimesecret
  HARBOR_REGISTRY: harbor.dreau.fr
  HARBOR_APPLICATION_REPOSITORY: harbor.dreau.fr/home/onetimesecret

stages:
  - test
  - build
  - build-docker
  - deploy

lint:
  stage: test
  script:
    - fixGoPath
    - go fmt ./...
    - go vet ./...

test:
  stage: test
  services:
    - bitnami/redis:4.0
  variables:
    ALLOW_EMPTY_PASSWORD: 'yes'
    OTS_STORE_ADDR: redis:6379
  script:
    - fixGoPath
    - go test -race -p 1 ./...
    - go test -run bench -bench . ./...

build:
  stage: build
  script:
    - fixGoPath
    - CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/onetimesecret
  artifacts:
    paths:
      - onetimesecret
    expire_in: 1 day

build-docker:
  stage: build-docker
  image: docker:git
  services:
    - docker:dind
  script:
    - build
  only:
    - master

deploy:
  stage: deploy
  image: totakoko/sshdeployer
  variables:
    SERVER_HOST: root@dreau.fr
    SERVER_PORT: 2222
  script:
    - /remote "cd /srv/config/onetimesecret && docker-compose pull server && docker-compose stop server && docker-compose up -d server"
  environment:
    name: production
    url: https://onetimesecret.dreau.fr
  # Disable cache and previous artifacts
  cache: {}
  dependencies: []
  only:
    - master

# Inspir√© de https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Auto-DevOps.gitlab-ci.yml
.script_functions: &script_functions |
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function fixGoPath() {
    mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    cd $GOPATH/src/$REPO_NAME
  }

  function build() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    if [[ -f Dockerfile ]]; then
      echo "Building Dockerfile-based application..."
      docker build --pull -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
      docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    else
      echo "Missing Dockerfile!"
      exit 1
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    docker push "$CI_APPLICATION_REPOSITORY:latest"
    echo ""

    # Harbor
    if [[ -n "$HARBOR_REGISTRY_USER" ]]; then
      echo "Logging to Harbor Container Registry with Harbor credentials..."
      docker login -u "$HARBOR_REGISTRY_USER" -p "$HARBOR_REGISTRY_PASSWORD" "$HARBOR_REGISTRY"
      docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$HARBOR_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$HARBOR_APPLICATION_REPOSITORY:latest"
      echo "Pushing to Harbor Container Registry..."
      docker push "$HARBOR_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      docker push "$HARBOR_APPLICATION_REPOSITORY:latest"
      echo ""
    fi
  }

before_script:
  - *script_functions
