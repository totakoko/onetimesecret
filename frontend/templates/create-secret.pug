extends layouts/base

block content
  form.ots-create-secret(method="post" action="/secrets")
    textarea.ots-textarea.ots-create-secret__textarea(name="secret" aria-label="Secret")
    .ots-create-secret__parameters
      label
        .ots-create-secret__field Expiration
        select.ots-select(name="expiration")
          option(value="60") 1 minute
          option(value="300") 5 minutes
          option(value="900") 15 minutes
          option(value="3600") 1 hour
          option(value="43200") 12 hours
          option(value="86400") 1 day
          option(value="604800") 1 week
          option(value="2678400") 1 month
    button.ots-create-secret__submit(type="submit") SEND

block append scripts
  script.
    const select = document.querySelector('select')
    select.value = localStorage.getItem('ots__lastExpirationValue') || 43200
    select.addEventListener('change', e => localStorage.setItem('ots__lastExpirationValue', e.target.value))

    // client-side encryption if javascript is enabled
    const form = document.querySelector('form')
    const submitButton = document.querySelector('.ots-create-secret__submit')
    submitButton.innerHTML = `<img src="/images/icon-lock.svg" alt="lock" style="vertical-align: text-bottom"/> ${submitButton.innerHTML}`
    form.addEventListener('submit', function submitHandler (e) {
      e.preventDefault()

      ;(async () => {
        try {
          const textarea = document.querySelector('textarea')
          const plainTextSecret = textarea.value
          const encryption = await new Encryption().randomInit()
          const cipher = await encryption.encrypt(plainTextSecret)

          // on-the-fly encryption of the secret
          form.removeEventListener('submit', submitHandler)
          textarea.value = arrayToBase64url(cipher)
          form.submit()
          textarea.value = plainTextSecret

          // on the next page
          // load the localstorage to see if a key was defined
          // add it to the link received from the server
          localStorage.setItem('ots__lastSecretEncryptionKey', await encryption.exportKey())
        } catch (err) {
          console.log(err)
        }
      })()
    })
